// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SimpleNotes.Infrastructure.DbContexts;
using SimpleNotes.Infrastructure.Enums;

#nullable disable

namespace SimpleNotes.Infrastructure.Migrations
{
    [DbContext(typeof(NotesDbContext))]
    [Migration("20240507143306_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "node_type", new[] { "folder", "note" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "ltree");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SimpleNotes.Infrastructure.Entities.TreeNode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("ltree");

                    b.Property<NodeType>("Type")
                        .HasColumnType("node_type");

                    b.HasKey("Id");

                    b.HasIndex("Path");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Path"), "GIST");

                    b.ToTable("TreeNodes");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SimpleNotes.Infrastructure.Entities.Note", b =>
                {
                    b.HasBaseType("SimpleNotes.Infrastructure.Entities.TreeNode");

                    b.Property<string>("Text")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("SimpleNotes.Infrastructure.Entities.Note", b =>
                {
                    b.HasOne("SimpleNotes.Infrastructure.Entities.TreeNode", null)
                        .WithOne()
                        .HasForeignKey("SimpleNotes.Infrastructure.Entities.Note", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
